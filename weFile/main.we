<template>
    <div>
        <image resize="cover" class="bgImg" src="{{bgImgSrc}}"></image>
        <div class="mainCont">
            <div class="leftPlayer">
                <bag repeat="{{ player in leftPlayer}}" player-id="{{player.playerId}}" drink-num="{{player.drinkArray.length}}" card-num="{{player.bag.length}}" onclick="showBag"></bag>
            </div>
            <div class="rightPlayer">
                <bag repeat="{{ player in rightPlayer}}" player-id="{{player.playerId}}" drink-num="{{player.drinkArray.length}}" card-num="{{player.bag.length}}"></bag>
            </div>
            <text class="currPlayerTip">玩家{{currPlayerId}}摸牌</text>
            <div class="helpBtn"><text class="helpText">？</text></div>
            <div class="endGameBtn"><text class="endGameText">结束游戏</text></div>
        </div>
        <div class="paiduiDiv">
            <image resize="cover" class="paidui" src="{{paiduiImg}}" onclick="selectCard"></image>
        </div>


        <!--注意这块，在modal组件中参数名为cardImgSrc，但是这块不能用cardImgSrc，得用card-img-src，怪怪的，那我上面的playerId咋能传过去呢？？？？-->
        <!--<modal if="{{isShow.cardModal}}" card-img-src="{{currCardImgUrl}}">
            <text>jjjj</text>
                <div class="cardBtnClass" if="{{cardBtnShow}}">
                <div class="cardUseDiv"><text class="cardUseText" onclick="">立即使用</text></div>
                <div class="cardStoreDiv"><text class="cardStoreText" onclick="">存入包裹</text></div>
            </div>&ndash;&gt;
        </modal>-->

        <bagModal if="{{isShow.bagModal}}" player-id="{{showBag.playerId}}" drink-num="{{showBag.drinkArray.length}}" bag="{{showBag.bag}}"></bagModal>

        <div id="cardDialog" class="dialog" if="{{isShow.cardModal}}">
            <div class="dialog-backdrop"></div>
            <div class="dialog-content">
                <div class="dialog-body">
                    <image src="{{currCardImgUrl}}" class="cardClass"></image>
                    <div class="cardBtnClass">
                        <div class="cardUseDiv" if="{{isShow.btnUse}}"><text class="cardUseText" onclick="useCard">{{btnText.use}}</text></div>
                        <div class="cardStoreDiv" if="{{isShow.btnStore}}"><text class="cardStoreText" onclick="storeToBag">{{btnText.store}}</text></div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</template>

<script>
    var modal = require('@weex-module/modal');

    module.exports = {
        data:{
            //存放54张牌的信息，其中id为牌的唯一标识，number为牌值(其中小王用14表示，大王用15表示)，url为对应的图片路径
            //后来又想了一下，card表可以不用存了，实在太大了，用另一种办法代替，即图片命名时直接是从1-2-k-小王-大王排好，命名从0-53
            //所以假设当前牌的id为x，如果x<53，则牌值为 int(x/4)+1 ，图片名为cardx.png , 如果x=53，则为小王 ， x=54则为大王

            bgImgSrc:"https://13111211.github.io/weexCompetition/imgs/background/bg3.jpg",//背景图片的url
            paiduiImg:"https://13111211.github.io/weexCompetition/imgs/paidui/paidui7.png",
            //player:null,//存储玩家的信息，包括id、bag、drinkNum、flag_9(是否拿有9牌)，该值在ready函数中进行初始化
            currPlayerId:1,//当前摸牌玩家的id，初始值为1
            playerNum:10,//该值应当从选择人数界面传过来，暂时还不知道怎么传？？？？
            leftPlayerNum:0,//左边玩家个数
            rightPlayerNum:0,//右边玩家个数
            leftPlayer:[],//左边玩家信息，包括id、bag、drinkNum、flag_9(是否拿有9牌)，该值在ready函数中进行初始化
            // bag:[num:0, name:A]
            rightPlayer:[],//右边玩家信息
            currCardOrder:[],//存储当前的牌序，在ready函数中初始化

            isShow: {
                bagModal: false,
                cardModal:false,
                btnUse: true,
                btnStore: true
            },
            btnText: {
              use: '立即使用',
              store: '存入包裹'
            },

            showBag: {
              playerId: 1,
              drinkNum: 0,
              bag : []
            },
            currCardImgUrl:null,//当前玩家抽到的牌的图片
            currCardNum:null,//当前玩家抽到的牌值
        },
        created: function() {
            this.$on("closeBagModal", function(event) {
                this.isShow.bagModal = false;
            });

            
        },
        //界面一载入执行的函数
        ready:function(){
            //生成一组随机牌
            while(this.currCardOrder.length<54){
                var t=Math.floor(Math.random()*54);//生成随机数
                if(this.currCardOrder.indexOf(t)==-1){
                    //如果t在集合arr中存在，indexOf会返回t在集合arr中的位置。如果不存在，indexOf会返回-1
                    this.currCardOrder.push(t);    //把生成的数字放进这个数组里
                }
            }

            //根据玩家人数初始化玩家信息
            var num = parseInt(this.playerNum/2);
            //this.playerArray
            if(this.playerNum%2 == 0){
                this.leftPlayerNum = num;
                this.rightPlayerNum = num;
                for(var i=1;i<=num;i++){
                    var obj = {playerId:i,bag:[],drinkNum:0, drinkArray: [], flag_9:false}
                    this.leftPlayer.push(obj);
                }
                for(var j=num+1;j<=this.playerNum;j++){
                    var obj = {playerId:j,bag:[],drinkNum:0, drinkArray: [], flag_9:false}
                    this.rightPlayer.push(obj);
                }
            }else{
                this.leftPlayerNum = num+1;
                this.rightPlayerNum = num;
                for(var i=1;i<=(num+1);i++){
                    var obj = {playerId:i,bag:[],drinkNum:0, drinkArray: [], flag_9:false}
                    this.leftPlayer.push(obj);
                }
                for(var j=num+2;j<=this.playerNum;j++){
                    var obj = {playerId:j,bag:[],drinkNum:0, drinkArray: [], flag_9:false}
                    this.rightPlayer.push(obj);
                }
            }
        },
        methods:{

            setDrinkNum: function(id) {
              this.getPlayerById(id).drinkArray.push(1);
            },

          

            //玩家分leftPlayer和rightPlayer存储，访问不方便，下为统一访问函数
            getPlayerById : function(id) {
              //在左边
              if(id <= this.leftPlayerNum) {
                return this.leftPlayer[id-1];
              }
              //在右边
              else if(id <= this.playerNum) {
                return this.rightPlayer[id-1-this.leftPlayerNum];
              }
            },

            //摸牌时的方法
            selectCard:function(){
                var cardId = this.currCardOrder[0];//获取当前牌的id
                this.currCardNum = parseInt(cardId/4)+1;//牌值
                this.currCardImgUrl = "https://13111211.github.io/weexCompetition/imgs/card/card"+cardId+".png";//牌的图片url
                //this.currCardImgUrl = "https://13111211.github.io/weexCompetition/imgs/card/card0.png";//牌的图片url
                //牌值不同的分支逻辑：显示按钮不同
                
                switch(this.currCardNum) {
                  case 1:
                  case 6:
                    this.btnText.use = "立即使用";
                    this.isShow.btnUse = true;
                    this.isShow.btnStore = false;
                    break;
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 8:
                    this.isShow.store = "存入包裹";
                    this.isShow.btnUse = false;
                    this.isShow.btnStore = true;
                    break;
                  case 7:
                  case 9:
                    this.isShow.store = "立即使用";
                    this.isShow.btnUse = false;
                    this.isShow.btnStore = true;
                    break;
                  case 10:
                    this.btnText.use = "跳过";
                    this.isShow.btnUse = true;
                    this.isShow.btnStore = false;
                    break;
                  case 11:
                  case 12:
                  case 13:
                  case 14:
                    this.btnText.use = "接收惩罚";
                    this.isShow.btnUse = true;
                    this.isShow.btnStore = false;
                    break;
                }
                this.isShow.cardModal = true;
                this.currCardOrder.shift();

              
            },
            

            useCard:function(){
                //调用惩罚函数
                
                this.drink(this.currPlayerId);

                this.isShow.cardModal = false;
                this.currPlayerId++;
            },

            //点击包裹时的方法
            showBag : function(e) {
              //根据点击事件获取被点击的Bag的playerId
              this.showBag.playerId = e.target._vm.playerId;
              this.showBag.drinkNum = e.target._vm.drinkNum;

              this.showBag.bag = this.getPlayerById(this.showBag.playerId).bag;
              

              //根据playerId操作leftPlayer或rightPlayer并获取其中Bag
              //根据Bag.length或cardNum确定数据需要加载一排或两排
              //处理Bag数组中的数据包装成bagModal中的数据并传入
              //收尾操作
              this.isShow.bagModal = true;
            
            },

            // 存入包裹函数
            storeToBag: function() {
                //操作对应currPlayerId 的 Bag,存入卡牌
                
                
                var cardNode;
                
                cardNode = {
                  num : this.currCardNum,
                  name: parseInt(this.currCardNum/4)+1
                }
                
                this.getPlayerById(this.currPlayerId).bag.push(cardNode);

                // 收尾操作
                this.isShow.cardModal = false;
                this.currPlayerId++;
            },

            //接受惩罚函数
            drink : function(drinkPlayerId) {
              //根据drinkPlaerId找其bag，看是否有2牌
              //  是：显示玩家drinkPlaerId有免酒卡，是否使用
              //    是： 删除其bag中的2牌，回到主界面
              //    否： 继续
              //  否：遍历所有玩家，查找是否有flag_9=true，存其Id playerId_9，
              //    是否需要其陪酒
              //    是：drinkPlaerId->drinkNum++;
              //        playerId_9->drinkNum++;
              //    否：drinkPlaerId->drinkNum++;
              //回主界面
              //
              
              var drinkBag = this.getPlayerById(drinkPlayerId).bag;

              for( var i in drinkBag) {
                if(drinkBag[i].name==2) {
                  modal.confirm({
                    'message': '玩家'+drinkPlayerId+'有免酒卡，是否使用？',
                    'okTitle': '使用',
                    'cancelTitle': '不使用'
                  }, function (e) {
                    if(String(e)=="使用") {
                      drinkBag.splice(i,1);
                      return;
                    }

                  });
                }
              }

              
              for (var j;j<this.playerNum;j++) {
                if(this.getPlayerById(j).flag_9==true) {
                  modal.confirm({
                    'message': '玩家'+drinkPlayerId+'有陪酒卡，是否让其陪酒？',
                    'okTitle': '是',
                    'cancelTitle': '否'
                  }, function (e) {
                    if(String(e)=="是") {
                      this.setDrinkNum(j);
                    }
                  });
                }
              }
              this.setDrinkNum(drinkPlayerId);

            }
        }
    }
</script>

<style>
    .bgImg{
        width: 750px;
        height:1175px;
    }
    .mainCont{
        position:absolute;
        top:0px;
        width: 750px;
        height:1175px;
    }
    .leftPlayer{
        width:150px;
        height:1175px;
        justify-content:center;
    }
    .rightPlayer{
        width:150px;
        height:1175px;
        justify-content:center;
        position:absolute;
        top: 0px;
        right:0px;
    }
    .currPlayerTip{
        width:750px;
        height:100px;
        position:absolute;
        top: 0;
        color: yellow;
        font-size: 80;
        font-weight: bold;
        text-align: center;
    }
    .helpBtn{
        width:80px;
        height:80px;
        background-color: blue;
        position: absolute;
        left: 0;
        bottom: 0;
    }
    .helpText{
        color: white;
        font-size: 50;
        text-align: center;
        font-weight: bold;
    }
    .endGameBtn{
        width:230px;
        height:80px;
        background-color: blue;
        position: absolute;
        right: 0;
        bottom: 0;
    }
    .endGameText{
        color: white;
        font-size: 50;
        text-align: center;
        font-weight: bold;
    }
    .paiduiDiv{
        position: absolute;
        top:0px;
        left:200px;
        height:1175px;
        justify-content:center;
    }
    .paidui{
        width:350px;
        height:500px;
    }

    .dialog-backdrop {
        opacity: .5;
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background-color: #000000;
    }
    .dialog {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        justify-content: center;
        align-items: center;
    }
    .dialog-content {
        width: 550px;
        height:720px;
        background-color: #ffffff;
        position: relative;
    }
    .dialog-body {
        padding: 20;
        justify-content: center;
    }
    .cardClass{
        width:500px;
        height:600px;
    }
    .cardBtnClass{
        flex-direction:row;
        justify-content:space-between;
    }
    .cardUseDiv{
        width:200px;
        height:80px;
        background-color: cornflowerblue;
        justify-content:center;
    }
    .cardUseText{
        color: white;
        font-size: 40;
        text-align: center;
        font-weight: bold;
    }
    .cardStoreDiv{
        width:200px;
        height:80px;
        background-color: cornflowerblue;
        justify-content:center;
    }
    .cardStoreText{
        color: white;
        font-size: 40;
        text-align: center;
        font-weight: bold;
    }
</style>