<template>
    <div>
        <image resize="cover" class="bgImg" src="{{bgImgSrc}}"></image>
        <div class="mainCont">
            <div class="leftPlayer">
                <bag repeat="{{ player in leftPlayer}}" player-id="{{player.playerId}}" drink-num="{{player.drinkArray.length}}" card-num="{{player.bag.length}}" bag-arr="{{player.bag}}" onclick="showBag"></bag>
            </div>
            <div class="rightPlayer">
                <bag repeat="{{ player in rightPlayer}}" player-id="{{player.playerId}}" drink-num="{{player.drinkArray.length}}" card-num="{{player.bag.length}}" bag-arr="{{player.bag}}" onclick="showBag"></bag>
            </div>
            <text class="currPlayerTip">玩家{{currPlayerId}}摸牌</text>
            <div class="helpBtn"><text class="helpText">？</text></div>
            <div class="endGameBtn"><text class="endGameText">结束游戏</text></div>
        </div>
        <div class="paiduiDiv">
            <image resize="cover" class="paidui" src="{{paiduiImg}}" onclick="showCard"></image>
        </div>

        <bagModal if="{{isShow.bagModal}}" player-id="{{showBag.playerId}}" drink-num="{{showBag.drinkNum}}" bag="{{showBag.bag}}"></bagModal>
        <cardModalUse if="{{isShow.cardModalUse}}" card-img-url="{{showCard.currCardImgUrl}}" card-tips="{{showCard.currCardTips}}"></cardModalUse>
        <cardModalSave if="{{isShow.cardModalSave}}" card-img-url="{{showCard.currCardImgUrl}}" card-tips="{{showCard.currCardTips}}"></cardModalSave>
        <juedouModal if="{{isShow.juedouModal}}" current-player="{{currPlayerId}}"></juedouModal>
        <randomFailModal if="{{isShow.randomFailModal}}" current-player="{{currPlayerId}}"></randomFailModal>
        <failPlayerRadioModal if="{{isShow.failRadioModal}}" current-player="{{currPlayerId}}" select-player="{{radioSelectPlayer}}"></failPlayerRadioModal>
    </div>
</template>

<script>
    var modal = require('@weex-module/modal');

    module.exports = {
        data:{
            //存放54张牌的信息，其中id为牌的唯一标识，number为牌值(其中小王用14表示，大王用15表示)，url为对应的图片路径
            //后来又想了一下，card表可以不用存了，实在太大了，用另一种办法代替，即图片命名时直接是从1-2-k-小王-大王排好，命名从0-53
            //所以假设当前牌的id为x，如果x<53，则牌值为 int(x/4)+1 ，图片名为cardx.png , 如果x=53，则为小王 ， x=54则为大王
            bgImgSrc: "/imgs/background/bg.png",
            //bgImgSrc:"https://13111211.github.io/weexCompetition/imgs/background/bg.png",//背景图片的url
            paiduiImg:"/imgs/paidui/paidui7.png",//牌堆图片的url
            currPlayerId:1,//当前摸牌玩家的id，初始值为1
            playerNum:10,//该值应当从选择人数界面传过来
            leftPlayerNum:0,//左边玩家个数
            rightPlayerNum:0,//右边玩家个数
            leftPlayer:[],//左边玩家信息，包括id、bag、drinkNum、flag_9(是否拿有9牌)，该值在ready函数中进行初始化
            // bag:[num:0, name:A]
            rightPlayer:[],//右边玩家信息
            currCardOrder:[],//存储当前的牌序，在ready函数中初始化
            isShow: {
                bagModal: false,
                cardModalUse:false,
                cardModalSave:false,
                juedouModal:false,
                randomFailModal:false,
                failRadioModal:false
            },
            //当前玩家的包裹中存的牌信息
            currPlayerBag:[],
            //包裹模态框的显示信息
            showBag: {
              playerId: 1,
              drinkNum: 0,
              bag : []
            },
            //卡牌模态框的显示信息
            showCard:{
                currCardImgUrl:null,
                currCardTips:null,
                currCardId:null,//当前玩家抽到的牌的id
                currCardNum:null//当前玩家抽到的牌值
            },
            //存放不同卡牌弹出框中，不同卡牌值对应的提示信息
            cardTipsArr:["",
                "决斗牌：随机选择一位玩家进行决斗，输的玩家喝酒一杯，立刻发动。",
                "免酒牌：能免除一次喝酒的惩罚，可保存到自己的包裹内，待到需要时使用。",
                "照相机牌：随时喊出照相机三个字即可使用，大家必须保持现有动作静止，10s内最先动的玩家罚酒一杯。",
                "录音机牌：随时喊出录音机三个字即可使用，前一秒说话的玩家需重复自己刚才说过的话，说错罚酒一杯。",
                "摸鼻子牌：随时摸自己的鼻子即为发动技能，剩余所有玩家必须都跟着摸自己的鼻子，最后一位摸鼻子的玩家罚酒一杯。",
                "玩游戏牌：在场所有玩家一块玩游戏，输的玩家罚酒一杯，游戏形式自行指定。",
                "神经病牌：抽到此牌的玩家变身成一个'神经病'，所有玩家均不可与该玩家搭话，否则罚酒一杯。",
                "如厕牌：可存入到自己的包裹中，待需要上厕所时使用，限使用一次。",
                "陪酒牌：游戏中其他玩家无论以何种方式受罚喝酒均可邀请该玩家陪酒，直到下一张陪酒牌出现。",
                "轮空牌：直接轮空，不进行任何操作。",
                "抽到本张牌的玩家的上家罚酒一杯。",
                "抽到本张牌的玩家的下家罚酒一杯。",
                "抽到本张牌的玩家自罚一杯。",
                "抽到本张牌的玩家自罚两杯。",
                "抽到本张牌的玩家自罚三杯。"],
            //存放卡牌在包裹中时显示的tip，只有2、3、4、5、7、8、9有，其余为空
            cardTipForBag:["","","免酒牌","照相机牌","录音机牌","摸鼻子牌","","神经病牌","如厕牌","陪酒牌"],
            radioSelectPlayer:""//决斗时选择的玩家
        },


        created: function() {
            //父组件监听包裹模态框的关闭事件
            this.$on("closeBagModal", function(event) {
                this.isShow.bagModal = false;
            });

            //父组件监听卡牌模态框的立即使用事件
            this.$on("useCard",function(event){

                this.isShow.cardModalUse = false;
                //如果抽到1牌，即决斗牌，执行如下
                
                switch (this.showCard.currCardNum) {
                    case 1:
                        this.isShow.juedouModal = true;
                        break;
                    case 6:
                        //如果抽到6牌，玩游戏牌
                        this.isShow.randomFailModal = true;
                        break;
                    case 7:
                    case 9:
                        //如果抽到7,9；点击立即使用，存入包裹
                        this.storeToBag();
                        break;
                    //如果抽到11,12,13,14,15，进行惩罚
                    case 11:
                        //调用罚酒的方法，上家喝一杯
                        if(this.currPlayerId == 1) {
                            this.drink(this.playerNum);
                        }else {

                            this.drink(this.currPlayerId-1);
                        }
                        break;
                    case 12:
                        //调用罚酒的方法，下家喝一杯
                        if( this.currPlayerId == this.playerNum ) {
                            this.drink(1);
                        }else {

                            this.drink(this.currPlayerId+1);
                        }
                        break;
                    case 13:
                        //调用罚酒的方法，自己喝一杯
                        this.drink(this.currPlayerId);
                        break;
                    case 14:
                        //调用罚酒的方法，自己喝两杯
                        this.drink(this.currPlayerId);
                        break;
                    case 15:
                        //调用罚酒的方法，自己喝三杯
                        this.drink(this.currPlayerId);
                        break;
                }
                this.currPlayerId = this.currPlayerId % this.playerNum + 1;//玩家id加1，变为下一位玩家
            });

            //父组件监听，卡牌模态框中的存入包裹事件
            this.$on("saveToBag" , function(event){
                this.storeToBag();
            });

            //父组件监听，决斗模态框的开始决斗事件
            this.$on("startJuedou" , function(event){
                this.isShow.juedouModal = false;
                this.isShow.failRadioModal = true;
                this.radioSelectPlayer = event.target._vm.randomPlayerId;
            });

            //父组件监听，随机选人点击确定后的惩罚操作
            this.$on("startPunish" , function(event){
                this.isShow.randomFailModal = false;
                this.isShow.failRadioModal = false;
                //调用罚酒的方法
                this.drink(event.target._vm.selectedPlayer);
            })

            
        },
        //界面一载入执行的函数
        ready:function(){
            //生成一组随机牌
            while(this.currCardOrder.length<54){
                var t=Math.floor(Math.random()*54);//生成随机数
                if(this.currCardOrder.indexOf(t)==-1){
                    //如果t在集合arr中存在，indexOf会返回t在集合arr中的位置。如果不存在，indexOf会返回-1
                    this.currCardOrder.push(t);    //把生成的数字放进这个数组里
                }
            }

            //根据玩家人数初始化玩家信息
            var num = parseInt(this.playerNum/2);
            //this.playerArray
            if(this.playerNum%2 == 0){
                this.leftPlayerNum = num;
                this.rightPlayerNum = num;
                for(var i=1;i<=num;i++){
                    var obj = {playerId:i,bag:[],drinkNum:0, drinkArray: [], flag_9:false}
                    this.leftPlayer.push(obj);
                }
                for(var j=num+1;j<=this.playerNum;j++){
                    var obj = {playerId:j,bag:[],drinkNum:0, drinkArray: [], flag_9:false}
                    this.rightPlayer.push(obj);
                }
            }else{
                this.leftPlayerNum = num+1;
                this.rightPlayerNum = num;
                for(var i=1;i<=(num+1);i++){
                    var obj = {playerId:i,bag:[],drinkNum:0, drinkArray: [], flag_9:false}
                    this.leftPlayer.push(obj);
                }
                for(var j=num+2;j<=this.playerNum;j++){
                    var obj = {playerId:j,bag:[],drinkNum:0, drinkArray: [], flag_9:false}
                    this.rightPlayer.push(obj);
                }
            }

            this.$on('convertPlayerNum',function(e){
                this.playerNum =e.detail;
            })
        },
        methods:{

            setDrinkNum: function(id) {
              this.getPlayerById(id).drinkArray.push(1);
            },

            //玩家分leftPlayer和rightPlayer存储，访问不方便，下为统一访问函数
            getPlayerById : function(id) {
              //在左边
              if(id <= this.leftPlayerNum) {
                return this.leftPlayer[id-1];
              }
              //在右边
              else if(id <= this.playerNum) {
                return this.rightPlayer[id-1-this.leftPlayerNum];
              }
            },

            //摸牌时的方法
            showCard:function(){
                //判断牌是否摸完
                if(this.currCardOrder.length == 0) {
                    this._parent.$emit('toScore');
                    return;
                }
                var cardId = this.currCardOrder[0];//获取当前牌的id
                this.currCardId = cardId;
                if(cardId != 53){
                    this.showCard.currCardNum = parseInt(cardId/4)+1;//牌值
                }else{
                    this.showCard.currCardNum = 15;
                }

                this.showCard.currCardImgUrl = "/imgs/newCardImg/"+cardId+".png";//牌的图片url
                this.showCard.currCardTips = this.cardTipsArr[this.showCard.currCardNum];
                //如果牌值为2,3,4,5,8，则为存入包裹，其余为立即使用
                switch (this.showCard.currCardNum) {
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 8:
                        this.isShow.cardModalSave = true;
                        break;
                    default:
                        this.isShow.cardModalUse = true;
                }
                this.currCardOrder.shift();
            },

            //点击包裹时的方法
            showBag : function(e) {
              //根据点击事件获取被点击的Bag的playerId
              this.showBag.playerId = e.target._vm.playerId;
              this.showBag.drinkNum = e.target._vm.drinkNum;

              this.showBag.bag = this.getPlayerById(this.showBag.playerId).bag;
              

              //根据playerId操作leftPlayer或rightPlayer并获取其中Bag
              //根据Bag.length或cardNum确定数据需要加载一排或两排
              //处理Bag数组中的数据包装成bagModal中的数据并传入
              //收尾操作
              this.isShow.bagModal = true;
            
            },

            // 存入包裹函数
            storeToBag: function() {
                //操作对应currPlayerId 的 Bag,存入卡牌
                var cardNode;
                
                cardNode = {
                    id : this.currCardId,//卡牌id
                    num: this.showCard.currCardNum,//卡牌数值
                    name:this.cardTipForBag[this.showCard.currCardNum]//卡牌技能信息

                }
                
                this.getPlayerById(this.currPlayerId).bag.push(cardNode);

                // 收尾操作
                this.isShow.cardModalSave = false;
                this.isShow.cardModalUse = false;

                this.currPlayerId = this.currPlayerId % this.playerNum + 1;//玩家Id循环
               

            },

            //接受惩罚函数
            drink : function(drinkPlayerId) {
              //根据drinkPlaerId找其bag，看是否有2牌
              //  是：显示玩家drinkPlaerId有免酒卡，是否使用
              //    是： 删除其bag中的2牌，回到主界面
              //    否： 继续
              //  否：遍历所有玩家，查找是否有flag_9=true，存其Id playerId_9，
              //    是否需要其陪酒
              //    是：drinkPlaerId->drinkNum++;
              //        playerId_9->drinkNum++;
              //    否：drinkPlaerId->drinkNum++;
              //回主界面
              //
              
              var drinkBag = this.getPlayerById(drinkPlayerId).bag;

              

              for( var i in drinkBag) {
                if(drinkBag[i].name==2) {

                  modal.confirm({
                    'message': '玩家'+drinkPlayerId+'有免酒卡，是否使用？',
                    'okTitle': '使用',
                    'cancelTitle': '不使用'
                  }, function (e) {
                    if(String(e)=="使用") {
                      drinkBag.splice(i,1);
                      return;
                    }else{

                      this.check9(drinkPlayerId);
                      
                    }

                  });

                  return;
                }
              }

              this.check9(drinkPlayerId);
              
            },
            //是否陪酒函数  自带modal的异步回调无法解决
            check9:function(drinkPlayerId) {
              for (var j;j<this.playerNum;j++) {
                if(this.getPlayerById(j).flag_9==true) {

                  modal.confirm({
                    'message': '玩家'+j+'有陪酒卡，是否让其陪酒？',
                    'okTitle': '是',
                    'cancelTitle': '否'
                  }, function (e) {
                    if(String(e)=="是") {
                      this.setDrinkNum(j);
                    }
                  });
                }
              }
              this.setDrinkNum(drinkPlayerId);
            }
        }
    }
</script>

<style>
    .bgImg{
        width: 750px;
        height:1175px;
    }
    .mainCont{
        position:absolute;
        top:0px;
        width: 750px;
        height:1175px;
    }
    .leftPlayer{
        width:150px;
        height:1175px;
        justify-content:center;
    }
    .rightPlayer{
        width:150px;
        height:1175px;
        justify-content:center;
        position:absolute;
        top: 0px;
        right:0px;
    }
    .currPlayerTip{
        width:750px;
        height:100px;
        position:absolute;
        top: 40px;
        color: yellow;
        font-size: 80;
        font-weight: bold;
        text-align: center;
    }
    .helpBtn{
        width:80px;
        height:80px;
        background-color: blue;
        position: absolute;
        left: 0;
        bottom: 0;
    }
    .helpText{
        color: white;
        font-size: 50;
        text-align: center;
        font-weight: bold;
    }
    .endGameBtn{
        width:230px;
        height:80px;
        background-color: blue;
        position: absolute;
        right: 0;
        bottom: 0;
    }
    .endGameText{
        color: white;
        font-size: 50;
        text-align: center;
        font-weight: bold;
    }
    .paiduiDiv{
        position: absolute;
        top:0px;
        left:200px;
        height:1175px;
        justify-content:center;
    }
    .paidui{
        width:350px;
        height:500px;
    }
</style>